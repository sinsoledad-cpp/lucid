// protos/user/v1/user.proto

syntax = "proto3";

package user.v1;

// go_package 必须指向您项目中独立的 gen/go 模块，以便解耦。
// 请将 "your-project.com/owner" 替换为您自己的 Go Module 路径。
option go_package = "your-project.com/owner/gen/go/user/v1";

// ----------------- Message Definitions -----------------

// UserInfo represents the public information of a user.
message UserInfo {
  int64 id = 1;
  string username = 2;
}

// RegisterRequest defines the request for user registration.
message RegisterRequest {
  // Username must be non-empty.
  string username = 1;
  // Password must meet complexity requirements (e.g., > 6 chars).
  string password = 2;
}

// RegisterResponse defines the response for user registration.
message RegisterResponse {
  // The unique ID of the newly created user.
  int64 id = 1;
  // The username of the newly created user.
  string username = 2;
}

// LoginRequest defines the request for user login.
message LoginRequest {
  string username = 1;
  string password = 2;
}

// LoginResponse defines the response for user login.
message LoginResponse {
  // A secure token for subsequent authenticated requests.
  string access_token = 1;
  // The duration in seconds for which the token is valid.
  int64 expires_in = 2;
}

// GetUserRequest defines the request for retrieving user information by ID.
message GetUserRequest {
  int64 id = 1;
}

// GetUserResponse defines the response for retrieving user information.
message GetUserResponse {
  UserInfo user_info = 1;
}

// ----------------- Service Definition -----------------

// User service defines RPCs for user management.
service User {
  // Register creates a new user account.
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // Login authenticates a user and returns an access token.
  rpc Login(LoginRequest) returns (LoginResponse);

  // GetUser retrieves user information by their ID.
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
}